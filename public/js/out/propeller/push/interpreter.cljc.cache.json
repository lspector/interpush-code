["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$get-literal-type","~$propeller.push.utils.helpers"],"~:excludes",["~#set",[]],"~:name","~$propeller.push.interpreter","~:imports",null,"~:requires",["^ ","~$push","~$propeller.push.core","^<","^<","~$state","~$propeller.push.state","^>","^>","~$io","~$propeller.push.instructions.input-output","^@","^@","^4","^4"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^3","^4"],"~:defs",["^ ","~$interpret-one-step",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/danielfloresg/cs/interpush-code/public/js/out/propeller/push/interpreter.cljc","~:line",7,"~:column",7,"~:end-line",7,"~:end-column",25,"~:arglists",["~#list",["~$quote",["^M",[["^="]]]]],"~:doc","Takes a Push state and executes the next instruction on the exec stack."],"^7","~$propeller.push.interpreter/interpret-one-step","^G","public/js/out/propeller/push/interpreter.cljc","^K",25,"~:method-params",["^M",[["^="]]],"~:protocol-impl",null,"~:arglists-meta",["^M",[null,null]],"^I",1,"~:variadic?",false,"^H",7,"~:ret-tag",["^6",[null,"~$clj","~$any"]],"^J",7,"~:max-fixed-arity",1,"~:fn-var",true,"^L",["^M",["^N",["^M",[["^="]]]]],"^O","Takes a Push state and executes the next instruction on the exec stack."],"~$interpret-program",["^ ","^E",null,"^F",["^ ","^G","/Users/danielfloresg/cs/interpush-code/public/js/out/propeller/push/interpreter.cljc","^H",39,"^I",7,"^J",39,"^K",24,"^L",["^M",["^N",["^M",[["~$program","~$start-state","~$step-limit"]]]]],"^O","Runs the given problem starting with the stacks in start-state. If the\n  start-state includes the key :keep-history with a truthy value, then\n  the returned state will include the key :history with a value that is a\n  vector containing all states prior to the final state."],"^7","~$propeller.push.interpreter/interpret-program","^G","public/js/out/propeller/push/interpreter.cljc","^K",24,"^Q",["^M",[["^[","^10","^11"]]],"^R",null,"^S",["^M",[null,null]],"^I",1,"^T",false,"^H",39,"^U",["^6",["^V","^W"]],"^J",39,"^X",3,"^Y",true,"^L",["^M",["^N",["^M",[["^[","^10","^11"]]]]],"^O","Runs the given problem starting with the stacks in start-state. If the\n  start-state includes the key :keep-history with a truthy value, then\n  the returned state will include the key :history with a value that is a\n  vector containing all states prior to the final state."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:vector_integer","~:keep-history","~:else","~:exec","~:vector_float","~:history","~:generic-vector","~:vector_boolean","~:step","~:vector_string"]],"~:order",["^1:","^1=","^1>","^1;","^17","^1@","^19","^1?","^18","^1<"]],"^O",null]