["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$interp.utils","~:imports",null,"~:requires",null,"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$get-vector-literal-type",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/danielfloresg/cs/interpush-code/src/interp/utils.cljs","~:line",3,"~:column",7,"~:end-line",3,"~:end-column",30,"~:arglists",["~#list",["~$quote",["^E",[["~$vector-stack"]]]]],"~:doc","Returns the literal stack corresponding to some vector stack."],"^5","~$interp.utils/get-vector-literal-type","^?","/Users/danielfloresg/cs/interpush-code/src/interp/utils.cljs","^C",30,"~:method-params",["^E",[["^G"]]],"~:protocol-impl",null,"~:arglists-meta",["^E",[null,null]],"^A",1,"~:variadic?",false,"^@",3,"~:ret-tag",["^4",["~$cljs.core/Keyword","~$clj-nil"]],"^B",3,"~:max-fixed-arity",1,"~:fn-var",true,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Returns the literal stack corresponding to some vector stack."],"~$indexof",["^ ","^=",null,"^>",["^ ","^?","/Users/danielfloresg/cs/interpush-code/src/interp/utils.cljs","^@",8,"^A",7,"^B",8,"^C",14,"^D",["^E",["^F",["^E",[["~$element","~$coll"]]]]],"^H","Returns the first index of an element in a collection. If the element is not\n  present in the collection, returns -1."],"^5","~$interp.utils/indexof","^?","/Users/danielfloresg/cs/interpush-code/src/interp/utils.cljs","^C",14,"^J",["^E",[["^T","^U"]]],"^K",null,"^L",["^E",[null,null]],"^A",1,"^M",false,"^@",8,"^N",["^4",["~$any","~$number"]],"^B",8,"^Q",2,"^R",true,"^D",["^E",["^F",["^E",[["^T","^U"]]]]],"^H","Returns the first index of an element in a collection. If the element is not\n  present in the collection, returns -1."],"~$not-lazy",["^ ","^=",null,"^>",["^ ","^?","/Users/danielfloresg/cs/interpush-code/src/interp/utils.cljs","^@",14,"^A",7,"^B",14,"^C",15,"^D",["^E",["^F",["^E",[["~$lst"]]]]],"^H","Returns lst if it is not a seq, or a non-lazy version of lst if it is."],"^5","~$interp.utils/not-lazy","^?","/Users/danielfloresg/cs/interpush-code/src/interp/utils.cljs","^C",15,"^J",["^E",[["^Z"]]],"^K",null,"^L",["^E",[null,null]],"^A",1,"^M",false,"^@",14,"^N",["^4",[null,"^W"]],"^B",14,"^Q",1,"^R",true,"^D",["^E",["^F",["^E",[["^Z"]]]]],"^H","Returns lst if it is not a seq, or a non-lazy version of lst if it is."],"~$ensure-list",["^ ","^=",null,"^>",["^ ","^?","/Users/danielfloresg/cs/interpush-code/src/interp/utils.cljs","^@",21,"^A",7,"^B",21,"^C",18,"^D",["^E",["^F",["^E",[["~$thing"]]]]],"^H","Returns a non-lazy list if passed a seq argument. Othwrwise, returns a list\n  containing the argument."],"^5","~$interp.utils/ensure-list","^?","/Users/danielfloresg/cs/interpush-code/src/interp/utils.cljs","^C",18,"^J",["^E",[["^11"]]],"^K",null,"^L",["^E",[null,null]],"^A",1,"^M",false,"^@",21,"^N",["^4",[null,"^W","~$cljs.core/List"]],"^B",21,"^Q",1,"^R",true,"^D",["^E",["^F",["^E",[["^11"]]]]],"^H","Returns a non-lazy list if passed a seq argument. Othwrwise, returns a list\n  containing the argument."],"~$random-instruction",["^ ","^=",null,"^>",["^ ","^?","/Users/danielfloresg/cs/interpush-code/src/interp/utils.cljs","^@",29,"^A",7,"^B",29,"^C",25,"^D",["^E",["^F",["^E",[["~$instructions"]]]]],"^H","Returns a random instruction from a supplied pool of instructions, evaluating\n  ERC-producing functions to a constant literal."],"^5","~$interp.utils/random-instruction","^?","/Users/danielfloresg/cs/interpush-code/src/interp/utils.cljs","^C",25,"^J",["^E",[["^15"]]],"^K",null,"^L",["^E",[null,null]],"^A",1,"^M",false,"^@",29,"^N",["^4",["^W","^P"]],"^B",29,"^Q",1,"^R",true,"^D",["^E",["^F",["^E",[["^15"]]]]],"^H","Returns a random instruction from a supplied pool of instructions, evaluating\n  ERC-producing functions to a constant literal."],"~$balanced?",["^ ","^=",null,"^>",["^ ","^?","/Users/danielfloresg/cs/interpush-code/src/interp/utils.cljs","^@",38,"^A",7,"^B",38,"^C",16,"^D",["^E",["^F",["^E",[["~$s"]]]]],"^H","Code found on:\n   https://commandercoriander.net/blog/2015/01/17/testing-for-balanced-brackets-in-clojure/"],"^5","~$interp.utils/balanced?","^?","/Users/danielfloresg/cs/interpush-code/src/interp/utils.cljs","^C",16,"^J",["^E",[["~$s"]]],"^K",null,"^L",["^E",[null,null]],"^A",1,"^M",false,"^@",38,"^N","~$boolean","^B",38,"^Q",1,"^R",true,"^D",["^E",["^F",["^E",[["~$s"]]]]],"^H","Code found on:\n   https://commandercoriander.net/blog/2015/01/17/testing-for-balanced-brackets-in-clojure/"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:else"]],"~:order",["^1>"]],"^H",null]